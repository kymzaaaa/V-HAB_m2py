class SCRA(vsys):
    """
    Sabatier Carbon Dioxide Reduction Assembly (SCRA)

    The SCRA uses H2 generated by OGA and CO2 from the CDRA to create
    water and methane. Methane is vented, but the water can be reused by
    the electrolyzer to generate more oxygen.
    """

    def __init__(self, oParent, sName, fFixedTS, fCoolantTemperature):
        """
        Initializes the SCRA subsystem.
        
        :param oParent: Parent system.
        :param sName: Name of the system.
        :param fFixedTS: Fixed time step for the simulation.
        :param fCoolantTemperature: Coolant temperature.
        """
        super().__init__(oParent, sName, fFixedTS)
        self.fCoolantTemperature = fCoolantTemperature
        self.fCurrentPowerConsumption = 0  # W

    def createMatterStructure(self):
        """
        Sets up the matter structure of the SCRA.
        """
        super().createMatterStructure()

        # Accumulator Tank
        fVolumeCRA_Accumulator = 0.02067
        self.create_store('CRA_Accumulator', fVolumeCRA_Accumulator)
        oAccumulatorCO2 = self.toStores['CRA_Accumulator'].create_phase(
            'gas', 'CO2', fVolumeCRA_Accumulator, {'CO2': 7e5}, 293, 0
        )

        # Hydrogen Input
        self.create_store('CRA_H2_In', 1e-6)
        oH2 = self.toStores['CRA_H2_In'].create_phase(
            'gas', 'flow', 'H2', 1e-6, {'H2': 1e5}, 293, 0
        )

        # Sabatier Reactor
        fPartialPressureCO2 = 0.01 * 101325
        fPartialPressureH2 = 0.01 * 101325
        fPartialPressureCH4 = 0.49 * 101325
        fPartialPressureH2O = 0.49 * 101325
        fVolumeCRA_Sabatier = 0.1
        self.create_store('CRA_Sabatier', fVolumeCRA_Sabatier)
        oCRA_SabatierPhase = self.toStores['CRA_Sabatier'].create_phase(
            'gas', 'flow', 'CRA_Sabatierphase', fVolumeCRA_Sabatier,
            {'CO2': fPartialPressureCO2, 'H2': fPartialPressureH2, 
             'CH4': fPartialPressureCH4, 'H2O': fPartialPressureH2O}, 811, 0
        )

        # Add Sabatier manipulator
        components.matter.SCRA.components.CRA_Sabatier_manip_proc(
            'CRA_Sabatier_proc', oCRA_SabatierPhase, 0.88
        )

        # Water Recovery
        fVolumeCRA_WaterRec = 0.02
        self.create_store('CRA_WaterRec', fVolumeCRA_WaterRec)
        oCRA_WaterRecLiquidPhase = self.toStores['CRA_WaterRec'].create_phase(
            'liquid', 'flow', 'RecoveredWater', 0.5 * fVolumeCRA_WaterRec, 
            {'H2O': 1}, 277, 1e5
        )
        fVolumeGasWaterRec = fVolumeCRA_WaterRec - oCRA_WaterRecLiquidPhase.fVolume
        oCRA_WaterRecGasPhase = self.toStores['CRA_WaterRec'].create_phase(
            'gas', 'flow', 'WRecgas', fVolumeGasWaterRec,
            {'CO2': fPartialPressureCO2, 'H2': fPartialPressureH2, 
             'CH4': fPartialPressureCH4, 'H2O': fPartialPressureH2O}, 280, 0
        )

        # Coolant Heat Exchanger (CHX)
        fCHX_Volume = 0.02
        self.create_store('CRA_CHXStore', fCHX_Volume)
        oCRA_CHXPhase = self.toStores['CRA_CHXStore'].create_phase(
            'liquid', 'CHXWater', 0.5 * fCHX_Volume, {'H2O': 1},
            self.fCoolantTemperature, 1e5
        )

        # Add components (pipes, valves, condenser, etc.)
        self._add_components(oH2, oCRA_SabatierPhase, oCRA_WaterRecGasPhase, 
                             oCRA_WaterRecLiquidPhase, oCRA_CHXPhase, 
                             oAccumulatorCO2)

    def _add_components(self, oH2, oCRA_SabatierPhase, oCRA_WaterRecGasPhase, 
                         oCRA_WaterRecLiquidPhase, oCRA_CHXPhase, oAccumulatorCO2):
        """
        Helper to add components like pipes, valves, etc.
        """
        fPipelength = 1
        fPipeDiameter = 0.1
        fFrictionFactor = 2e-4

        for i in range(1, 12):
            components.matter.pipe(self, f'Pipe_{i:03d}', fPipelength, fPipeDiameter, fFrictionFactor)

        # Valves and Heater
        components.matter.valve(self, 'SabatierValve', 0)
        components.matter.valve(self, 'VentValveH2', 0)
        components.matter.valve(self, 'Checkvalve', 0)
        components.matter.SCRA.components.CRA_Sabatier_Heater(self, 'CRA_SabatierHeater')

        # Condenser and counterpart
        oCondenser = components.matter.SCRA.components.Condenser(self, 'CRA_CHX', 277, 0.5)
        oP2P = components.matter.SCRA.components.CondenserP2P(
            self.toStores['CRA_WaterRec'], 'CondensingHX', 
            oCRA_WaterRecGasPhase, oCRA_WaterRecLiquidPhase, oCondenser
        )
        components.matter.SCRA.components.CondenserCounterpart(
            self, 'CRA_CHXCoolant', oCondenser, oP2P
        )
        components.matter.SCRA.components.CondenserTemperatureChange(
            self, 'CondenserTempChange', oCondenser
        )

        # Constant pressure exme
        components.matter.SCRA.components.const_press_exme(
            oAccumulatorCO2, 'SCRA_CO2_Inlet', 10
        )

        # Branches
        self._add_branches(oH2, oCRA_SabatierPhase, oCRA_WaterRecGasPhase, 
                           oCRA_WaterRecLiquidPhase, oCRA_CHXPhase, 
                           oAccumulatorCO2)

    def _add_branches(self, oH2, oCRA_SabatierPhase, oCRA_WaterRecGasPhase, 
                      oCRA_WaterRecLiquidPhase, oCRA_CHXPhase, oAccumulatorCO2):
        """
        Helper to add branches between components.
        """
        matter.branch(self, oH2, ['Pipe_001', 'CRA_H2_Regulator'], 'SCRA_H2_In', 'CRA_H2_In')
        matter.branch(self, 'CRA_Accumulator.SCRA_CO2_Inlet', ['Pipe_002'], 'SCRA_CO2_In', 'CRA_CO2_In')
        matter.branch(self, oAccumulatorCO2, ['Pipe_003'], oCRA_SabatierPhase, 'Accumulator_To_CRA')

        matter.branch(self, oCRA_SabatierPhase, ['Pipe_004', 'CRA_CHX', 'Checkvalve'], oCRA_WaterRecGasPhase, 'CRA_ProductstoWaterRecbranch')
        matter.branch(self, oCRA_WaterRecGasPhase, ['Pipe_005', 'CondenserTempChange', 'VacuumOutlet'], 'SCRA_DryGas_Out', 'CRA_DryGastoVent')
        matter.branch(self, oCRA_WaterRecLiquidPhase, ['Pipe_006'], 'SCRA_Condensate_Out', 'CRA_RecWaterOut')
        matter.branch(self, oCRA_CHXPhase, ['Pipe_007'], 'SCRA_CoolantIn', 'CRA_CoolantLoopIn')
        matter.branch(self, oCRA_CHXPhase, ['Pipe_008', 'CRA_CHXCoolant', 'CRA_SabatierHeater'], 'SCRA_CoolantOut', 'CRA_CoolantLoopOut')

    def exec(self, _):
        """
        Execution logic for the SCRA.
        """
        super().exec()
        # Similar implementation as MATLAB with adjustments to Python syntax.
